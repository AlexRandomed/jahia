Rendering filters

  Rendering filters are classes that can tranform the output of a module.
  They work like standard servlet filters, except that they are executed independantly for every
  module inclusion. Filters can be executed on all modules, or on some specific module or nodes.

* Configuration

  Default filter chain is defined in the applicationContext-services.xml, in the <filters> property of the
  <RenderService> bean.

-------------------------------
      <property name="filters" >
          <list>
              <bean class="org.jahia.services.render.filter.AttributesFilter" />
              <bean class="org.jahia.services.render.filter.MetricsLoggingFilter" >
                  <property name="loggingService" ref="loggingService"/>
              </bean>
              <bean class="org.jahia.services.render.filter.WrapperFilter" />
              <bean class="org.jahia.services.render.filter.SkinFilter" />
              <bean class="org.jahia.services.render.filter.OptionsFilter" />
              <bean class="org.jahia.services.render.filter.ModuleFilter" />
              <bean class="org.jahia.services.render.filter.TemplateScriptFilter" />
          </list>
      </property>
-------------------------------

  A module can define its own filter chain. (?)


* Filter implementation

  A filter is single class implementing the org.jahia.services.render.filter.RenderFilter
  interface. An abstract class org.jahia.services.render.filter.AbstractFilter, can be used as
  a base class for a new filter.

  The interface defines mainly one method to implement :

------------------
  public String doFilter(RenderContext renderContext, Resource resource, RenderChain chain) throws IOException, RepositoryException, TemplateNotFoundException;
------------------

  This method returns the final output after filtering. The chain attribute gives the possibility
  to get the result generated by the remaining chain. This result can be used as an input for the
  filter.

  If the filter needs to tranform the output of the chain, it needs to call
  The output of the render chain is obtained by calling :

------------------
  String out = chain.doFilter(renderContext, resource);
------------------

  So, a basic filter replacing all occurences of letter <a> by letter <b> would look like :

------------------
      public String doFilter(RenderContext renderContext, Resource resource, RenderChain chain)
                    throws IOException, RepositoryException, TemplateNotFoundException {
          String out = chain.doFilter(renderContext, resource);
          return out.replace("a","b");
      }
------------------

  A filter can also break the chain, by returning its own content and not calling the rest of the
  chain. The following filter will just return some information on the node that was supposed to be displayed,
  but won't display the template itself :

------------------
      public String doFilter(RenderContext renderContext, Resource resource, RenderChain chain)
                    throws IOException, RepositoryException, TemplateNotFoundException {
          return resource.getNode().getPath() + " / " + resource.getResolvedTemplate();
      }
------------------


* Default filters

  Jahia provides some simple filters that can be added to the default configuration.

  * Email obfuscation

  The filter org.jahia.services.render.filter.EmailObfuscatorFilter replaces all mail adresses
  by entity-encoded values. This protects email adresses harvesting.

  * Regular expression replacement

  The filter org.jahia.services.render.filter.RegexpFilter allows to make any replacement in the
  output, based on regular expressions. The list of replacements need to be defined in the regexp
  property. The following example replaces all text inside square brackets with \<em\> tag :

------------------------------
 <bean class="org.jahia.services.render.filter.RegexpFilter" >
    <property name="regexp">
       <map>
          <entry key="\[([a-zA-Z]*)\]">
              <value><![CDATA[<em>$1</em>]]></value>
          </entry>
        </map>
    </property>
 </bean>
------------------------------
