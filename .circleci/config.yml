version: 2.1

commands:
  generate_cachekey_seed:
      description: Generate Cache Key Seeds
      steps:
      - run: 
          name: Generate Cache Key Seeds
          command: |
            find . -name 'pom.xml' | sort | xargs cat > ~/source/maven_cache_seed

references:
  workdir: &workdir
    working_directory: ~/source

  persist-workspace: &persist-workspace
    persist_to_workspace:
      root: ~/source
      paths:
        - .

  attach-workspace: &attach-workspace
    attach_workspace:
      at: .

jobs:
  checkout:
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - checkout
      - generate_cachekey_seed
      - *persist-workspace

  build:
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    resource_class: xlarge
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v1-maven-dependencies-{{ checksum "maven_cache_seed" }}
            - v1-maven-dependencies-
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - run:
          name: Docker login
          # This is needed to push docker image
          command: |
            echo "$DOCKERHUB_LOGIN"
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_LOGIN" --password-stdin
      - run:
          name: Store Jahia version
          command: |
            mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec > jahia.version
            cp jahia.version image.tag
      - run:
          name: Determine tag
          command: |
            if [ "false" = "<< pipeline.parameters.run_pull_request >>" ]; then
              cp jahia.version image.tag
            else
              echo `cat jahia.version`-"${CIRCLE_BRANCH}" > image.tag
            fi
      - unless:
          condition: << pipeline.parameters.run_pull_request >>
          steps:
            - run:
                # TODO For now I just replaced the Bamboo build number by the CircleCI build number
                name: Build package and load all dependencies into local Maven repository
                command: |
                  mvn -s .circleci/.circleci.settings.xml -e -Dimage.tag=`cat image.tag` clean deploy de.qaware.maven:go-offline-maven-plugin:resolve-dependencies \
                     -Pgwt-production,unit-tests,docker -Dbamboo.buildNumber=$CIRCLE_BUILD_NUM
            - run:
                # TODO For now I just replaced the Bamboo build number by the CircleCI build number
                name: Compile GWT development
                working_directory: ~/source/gwt
                command: mvn -s ../.circleci/.circleci.settings.xml -e -Dimage.tag=`cat ../image.tag` clean deploy -Pgwt-development -Dbamboo.buildNumber=$CIRCLE_BUILD_NUM
      - when:
          condition: << pipeline.parameters.run_pull_request >>
          steps:
            - run:
                # TODO For now I just replaced the Bamboo build number by the CircleCI build number
                name: Build package and load all dependencies into local Maven repository
                command: |
                  mvn -s .circleci/.circleci.settings.xml -e -Dimage.tag=`cat image.tag` clean install de.qaware.maven:go-offline-maven-plugin:resolve-dependencies \
                     -Pgwt-production,unit-tests,docker -Dbamboo.buildNumber=$CIRCLE_BUILD_NUM
            - run:
                # This is only done on PR, as master is pushed with mvn deploy in "Deploy artifacts to server repository"
                name: Push PR Docker image
                command: |
                  docker push jahia/jahia-core-dev:`cat image.tag`
      - run:
          name: Store docker image
          command: docker save -o image.tar jahia/jahia-core-dev:`cat image.tag`
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-dependencies-{{ checksum "maven_cache_seed" }}
      - *persist-workspace

  integration_tests:
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    # Available types: medium, large, xlarge, 2xlarge https://circleci.com/docs/2.0/configuration-reference/#machine-executor-linux
    resource_class: xlarge
    parameters:
      TESTS_IMAGE:
        type: string
        default: "jahia/jahia-core-test"
      BUILD_TESTSIMAGE:
        type: boolean
        default: true
      TESTS_PATH:
        type: string
        default: "docker/docker-tests/"
    steps:
      - *attach-workspace
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - run:
          name:
            Prepare artifacts
            # This command copy the various build artifacts into the /tests/ folder to be later
            # used by jahia-cli to provision Jahia for testing
          command: |
            if [ ! -d << parameters.TESTS_PATH >>artifacts ]; then
              mkdir -p << parameters.TESTS_PATH >>artifacts
            fi
      - run:
          name: Docker login
          # This is needed to fetch private docker images (such as Jahia snapshot)
          command: |
            echo "$DOCKERHUB_LOGIN"
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_LOGIN" --password-stdin
      - run:
          name: Load docker image
          command: docker load -i image.tar
      - run:
          name: Spin-up dockerized jahia
          # At that point we're only sprinning up Jahia and its runtime dependencies,
          # We are not starting the tests yet since we first want to build the test container (or run from a previously built container) \
          # Checking the presence of the .env file is there because it's needed by the tests, but to not break ci/cd if variables
          #   are added to the compose file but not to the environment variables in circleci config.yml
          command: |
            set -e
            cd << parameters.TESTS_PATH >>
            if [[ ! -e .env ]]; then
              mv .env.example .env
            fi
            echo JAHIA_IMAGE=jahia/jahia-core-dev:`cat ../../image.tag` >> .env
            docker-compose -f docker-compose.yml up -d jahia
          no_output_timeout: 2h
      - run:
          # We want to build the test image from scratch with any code change (since that code change could be in the tests themselves)
          name: Build << parameters.TESTS_IMAGE >> image
          command: |
            if [ << parameters.BUILD_TESTSIMAGE >> == true ]; then
              cd << parameters.TESTS_PATH >>
              docker build -t << parameters.TESTS_IMAGE >> .
              docker save -o tests_image.tar << parameters.TESTS_IMAGE >>
            fi
      - run:
          name: Execute tests
          # Running the tests, note that the reports are copied at the end of execution
          # We don't need (nor want) this actual step to fail
          # Failure is determined by counting the number of failed tests in the output report
          # Note: the timeout env vars are added to address this: https://github.com/docker/compose/issues/3927
          command: |
            set -e
            cd << parameters.TESTS_PATH >>
            export DOCKER_CLIENT_TIMEOUT=120
            export COMPOSE_HTTP_TIMEOUT=120
            docker-compose -f docker-compose.yml up cypress
            docker cp cypress:/tmp/results ./artifacts
          no_output_timeout: 2h
          environment:
            TESTS_IMAGE: << parameters.TESTS_IMAGE >>:latest
      - run:
          name: Export jahia logs
          when: always
          command: |
            set -e
            cd << parameters.TESTS_PATH >>
            docker logs jahia > ./artifacts/results/jahia.log
            docker logs cypress > ./artifacts/results/cypress.log
      # This is not needed since cypress is going to terminat on failure with exit code 1
      - run:
          name: Analyze Test results
          when: always
          # This looks at the report and fail the job if one of the test has failed
          command: |
            cd << parameters.TESTS_PATH >>
            if [[ ! -e ./artifacts/results/test_success ]]; then
              echo "More than one failure found, sending exit signal"
              exit 1
            fi
      - store_test_results:
          path: << parameters.TESTS_PATH >>artifacts/results/xml_reports
      - run:
          name: remove xml results folder
          command: rm -rf << parameters.TESTS_PATH >>artifacts/results/xml_reports
      - store_artifacts:
          path: << parameters.TESTS_PATH >>artifacts/results
      - *persist-workspace


  sonar:
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch-node
    resource_class: xlarge
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v1-maven-dependencies-{{ checksum "maven_cache_seed" }}
            # fallback to using the latest cache if no exact match is found
            - v1-maven-dependencies-
      - restore_cache:
          keys:
            - v1-sonar-owasp-dependencies-<< pipeline.parameters.run_pull_request >>
            - v1-sonar-owasp-dependencies-
      - when:
          condition: << pipeline.parameters.run_pull_request >>
          steps:
            - run:
                name: Analyze pull request with sonar
                command: |
                  mvn -s .circleci/.circleci.settings.xml sonar:sonar -Dsonar.pullrequest.branch=$CIRCLE_BRANCH \
                  -Dsonar.pullrequest.key=<< pipeline.parameters.pull_request_number >> \
                  -Dsonar.pullrequest.base=<< pipeline.parameters.target_branch >> \
                  -Dsonar.pullrequest.github.repository=<< pipeline.parameters.github_repository >>
      - unless:
          condition: << pipeline.parameters.run_pull_request >>
          steps:
            - run:
                name: Sonar analysis
                environment:
                  DEPENDENCY_CHECK_SETTINGS: -DfailOnError=false -DskipProvidedScope=true -DskipTestScope=false
                      -DretireJsAnalyzerEnabled=false -DnodeAnalyzerEnabled=false -Dformats=HTML,JSON
                      -Dsonar.dependencyCheck.jsonReportPath=target/dependency-check-report.json
                      -Dsonar.dependencyCheck.htmlReportPath=target/dependency-check-report.html
                      -DdataDirectory=/home/circleci/.owasp/dependency-check-data
                      -DsuppressionFile=.circleci/owasp-suppressions.xml
                command: |
                  if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
                    mvn -s .circleci/.circleci.settings.xml dependency-check:aggregate sonar:sonar \
                        $DEPENDENCY_CHECK_SETTINGS
                  else
                    mvn -s .circleci/.circleci.settings.xml dependency-check:aggregate sonar:sonar \
                        -Dsonar.branch.name=$CIRCLE_BRANCH $DEPENDENCY_CHECK_SETTINGS
                  fi
      - save_cache:
          paths:
            - ~/.owasp/dependency-check-data
            - ~/.sonar/cache
          key: v1-sonar-owasp-dependencies-<< pipeline.parameters.run_pull_request >>

  trigger_pack_build:
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - when:
          condition:
            not: << pipeline.parameters.run_pull_request >>
          steps:
            - run:
                name: Trigger the build of jahia-pack
                command: curl -X POST --url 'https://circleci.com/api/v2/project/gh/Jahia/jahia-pack-private/pipeline'
                  --header 'circle-token:'"$CIRCLECI_PIPELINE_LAUNCH_TOKEN"''
                  --header 'content-type:application/json'
                  --data '{ "parameters":{"run_core_code_change":true}, "branch":"'"$CIRCLE_BRANCH"'" }'
      - when:
          condition: << pipeline.parameters.run_pull_request >>
          steps:
            - *attach-workspace
            - run:
                name: Trigger the build of jahia-pack
                command: |
                  PR_URL=$(echo https://api.github.com/repos/${CIRCLE_PULL_REQUEST:19} | sed "s/\/pull\//\/pulls\//")
                  BASE_BRANCH=$(curl -s -H "Authorization: token ${GITHUB_API_TOKEN}" $PR_URL | jq -r '.base.ref')
                  if curl -s -H "Authorization: token ${GITHUB_API_TOKEN}" https://api.github.com/repos/Jahia/jahia-pack-private/branches/$CIRCLE_BRANCH | jq -e -r .name
                  then
                    BRANCH=$CIRCLE_BRANCH
                  else
                    BRANCH=$BASE_BRANCH
                  fi
                  echo Trigger build on branch $BRANCH ..
                  curl -X POST --url 'https://circleci.com/api/v2/project/gh/Jahia/jahia-pack-private/pipeline' \
                    --header 'circle-token:'"$CIRCLECI_PIPELINE_LAUNCH_TOKEN"'' \
                    --header 'content-type:application/json' \
                    --data '{ "parameters":{"run_core_code_change":true, "run_pull_request":true, "BASE_BRANCH":"'"$BASE_BRANCH"'", "PARENT_IMAGE_TAG":"'"`cat image.tag`"'"}, "branch":"'"$BRANCH"'" }'

# Pipeline parameter must be declared
parameters:
  run_pull_request:
    type: boolean
    default: false
  target_branch:
    type: string
    default: ""
  pull_request_number:
    type: string
    default: ""
  github_repository:
    type: string
    default: ""

workflows:
  version: 2
  # This one is run only when triggered with the API, using a GitHub action
  pull_request:
    when: << pipeline.parameters.run_pull_request >>
    jobs:
      - checkout:
          name: PR Checkout
      - build:
          name: PR Build Jahia
          context: QA_ENVIRONMENT
          requires:
            - PR Checkout
      - integration_tests:
          name: Integration tests
          context: QA_ENVIRONMENT
          requires:
            - PR Build Jahia
      - sonar:
          name: PR Sonar analysis
          context: QA_ENVIRONMENT
          requires:
            - PR Build Jahia
      - trigger_pack_build:
          name: Trigger build of jahia-pack-private for PR
          context: QA_ENVIRONMENT
          requires:
            - PR Build Jahia
  on-code-change:
    jobs:
      - checkout:
          filters:
            branches:
              only:
                - master
                - /feature-.*/
                - /JAHIA-[0-9]-[0-9]-[0-9]-X-BRANCH/
      - build:
          name: Build Jahia
          context: QA_ENVIRONMENT
          requires:
            - checkout
      - integration_tests:
          name: Integration tests
          context: QA_ENVIRONMENT
          requires:
            - Build Jahia
      - sonar:
          name: Sonar analysis
          context: QA_ENVIRONMENT
          requires:
            - Build Jahia
      - trigger_pack_build:
          name: Trigger build of jahia-pack-private
          context: QA_ENVIRONMENT
          requires:
            - Build Jahia
