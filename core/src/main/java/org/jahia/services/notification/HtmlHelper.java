/**
 * This file is part of Jahia: An integrated WCM, DMS and Portal Solution
 * Copyright (C) 2002-2009 Jahia Solutions Group SA. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 * As a special exception to the terms and conditions of version 2.0 of
 * the GPL (or any later version), you may redistribute this Program in connection
 * with Free/Libre and Open Source Software ("FLOSS") applications as described
 * in Jahia's FLOSS exception. You should have received a copy of the text
 * describing the FLOSS exception, and it is also available here:
 * http://www.jahia.com/license
 *
 * Commercial and Supported Versions of the program
 * Alternatively, commercial and supported versions of the program may be used
 * in accordance with the terms contained in a separate written agreement
 * between you and Jahia Solutions Group SA. If you are unsure which license is appropriate
 * for your use, please contact the sales department at sales@jahia.com.
 */
package org.jahia.services.notification;

import org.jahia.params.ProcessingContext;
import org.jahia.utils.JahiaTools;
import org.jahia.exceptions.JahiaException;
import org.jahia.services.usermanager.JahiaUser;
import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;

import java.net.URL;
import java.io.InputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.regex.Pattern;

import au.id.jericho.lib.html.*;


/**
 * Helper class hat provides methods to transform HTML generated by jahia in something readable by mail clients
 *
 * @author toto
 */
public class HtmlHelper {
    public static final Logger logger = Logger.getLogger(HtmlHelper.class);

    public static String getPage(ProcessingContext processingContext, JahiaUser user, String language, int pageID) throws IOException, JahiaException {
        String s = processingContext.composePageUrl(pageID, language);
        s = Pattern.compile("/op/[a-z]+/").matcher(s).replaceAll("/");
        if (s.contains(";jsessionid")) {
            s = s.substring(0,s.indexOf(";jsessionid"));
        }
        URL url = new URL(org.jahia.settings.SettingsBean.getInstance().getLocalAccessUri() + s);

        InputStream is = JahiaTools.makeJahiaRequest(url, user, null, null, 5);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        IOUtils.copy(is,baos);
        return baos.toString("UTF-8");
    }

    public static String cleanHtmlForNewsletter(ProcessingContext ctx, String content) throws JahiaException {

        if (content == null || content.length() == 0) {
            return "";
        }

        Source source = new Source(content);
        OutputDocument document = new OutputDocument(source);
        List<StartTag> linkTags = source.findAllStartTags(Tag.A);
        for (StartTag startTag : linkTags) {
            final Attributes attributes = startTag.getAttributes();
            final Attribute href = attributes.get("href");
            restoreURL(ctx, document, href);
        }
        linkTags = source.findAllStartTags(Tag.IMG);
        for (StartTag startTag : linkTags) {
            final Attributes attributes = startTag.getAttributes();
            final Attribute href = attributes.get("src");
            restoreURL(ctx, document, href);
        }
        linkTags = source.findAllStartTags(Tag.INPUT);
        for (StartTag startTag : linkTags) {
            final Attributes attributes = startTag.getAttributes();
            final Attribute href = attributes.get("src");
            restoreURL(ctx, document, href);
        }
//        linkTags = source.findAllStartTags(Tag.PARAM);
//        for (StartTag startTag : linkTags) {
//            final Attributes attributes = startTag.getAttributes();
//            final Attribute href = attributes.get("value");
//            restoreURL(ctx, document, href);
//        }

        StringBuilder sb=new StringBuilder();
        linkTags = source.findAllStartTags(Tag.LINK);
        for (StartTag startTag : linkTags) {
            final Attributes attributes = startTag.getAttributes();
            if ("stylesheet".equals(attributes.get("rel").getValue())) {
                Attribute type = attributes.get("type");

                String href = attributes.get("href").getValue();
                if (href == null) {
                    continue;
                }
                Attribute media = attributes.get("media");
                if (media != null && !media.getValue().equalsIgnoreCase("screen")) {
                    continue;
                }

                if (href.startsWith("/")) {
                    href = ctx.getScheme() + "://" + ctx.getServerName() + ":" + ctx.getServerPort() + href;
                }
                try {
                    InputStream is = new URL(href).openStream();
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    IOUtils.copy(is,baos);

                    sb.setLength(0);
                    sb.append("<style");
                    if ( type!=null ) {
                        sb.append(' ').append(type);
                    }
                    String basehref = href.substring(0,href.lastIndexOf('/')+1);
                    String stylesheet = baos.toString("UTF-8");
                    
                    stylesheet = Pattern.compile("url *\\( *\"?([^\\:\" )]*)\"? *\\)").matcher(stylesheet).replaceAll("url(\""+basehref+"$1\")");

                    sb.append(">\n").append(stylesheet).append("\n</style>");
			        document.replace(startTag,sb.toString());
                } catch (IOException e) {
                    logger.error("Cannot get stylesheet part", e);
                }
            }
        }
        linkTags = source.findAllStartTags(Tag.DIV);
        for (StartTag startTag : linkTags) {
            final Attributes attributes = startTag.getAttributes();
            final Attribute styleAttr = attributes.get("style");
            if (styleAttr != null ) {
                String basehref = ctx.getScheme() + "://" + ctx.getServerName() + ":" + ctx.getServerPort();
                String v = styleAttr.getValue();
                v = Pattern.compile("url *\\( *\"?([^\\:\")]*)\"? *\\)").matcher(v).replaceAll("url("+basehref+"$1)");
                document.replace(styleAttr.getValueSegment(), v);
            }

        }



        return document.toString();
    }


    private static void restoreURL (ProcessingContext ctx, OutputDocument document, Attribute href) throws JahiaException {
        if (href == null) {
            return;
        }
        String originalHrefValue = href.getValue();
        String hrefValue = originalHrefValue;
        if (hrefValue.startsWith("/")) {
            hrefValue = ctx.getScheme() + "://" + ctx.getServerName() + ":" + ctx.getServerPort() + hrefValue;
            if (hrefValue.contains(";jsessionid")) {
                hrefValue = hrefValue.substring(0,hrefValue.indexOf(";jsessionid"));
            }
            if (hrefValue != null && !originalHrefValue.equals(hrefValue)) {
                document.replace(href.getValueSegment(), hrefValue);
            }
        }
    }

}
