Jahia Crazy Jane - Core Module - CKEditor integration

  CKEditor is a text editor to be used inside web pages. It's a WYSIWYG editor, which means that the text being edited on it looks as similar as possible to the results users have when publishing it. It brings to the web common editing features found on desktop editing applications like Microsoft Word and OpenOffice. In Jahia, CKeditor is used to display richText property of a content node.

  For more information about CKEditor, please look at: http://ckeditor.com/


* How is it integrated into Jahia ?

  To intall ckeditor, ckeditor.js included in the destribution has to be added in the <head> section.In order to avoid javascript conflict, ckeditor.js is merged with the javascript generated by gwt. This is done by adding in the file /gwt/src/main/resources/org/jahia/ajax/gwt/JahiaGWT.gwt.xml the following code:

-------------------------------------
<module>
    ...
    <script src="./ckeditor/ckeditor.js"/>
    ...
</module>
-------------------------------------

    The others files comming with CKEditor distribution are automatically located by ckeditor.js. However, these files are supposed to be in the same directory as ckeditor.js . As all gwt resources are in .../gwt/resources directory, an url-rewritting rule has been added:

--------------------------------------
 <rule>
    <from>^(.*?)/gwt/(.*?)/ckeditor/(.*?)</from>
    <to last="true">$1/gwt/resources/ckeditor/$3</to>
    ...
</rule>
--------------------------------------


* How is it integrated into GWT ?

  CKEditor object definied in ckeditor.js has been wrapped in a GWT component: org.jahia.ajax.gwt.client.widget.ckeditor. Basically, this component is a set of gwt native method that allows to interact with the embedded ckeditor instance:

--------------------------------------
public class CKEditor extends Component {
...

    private native void _setCKData(String html)/*-{
        var oEditor = this.@org.jahia.ajax.gwt.client.widget.ckeditor.CKEditor::editorInstance ;
        oEditor.setData(html);
      }-*/;


    private native String getCKData()/*-{
        var oEditor = this.@org.jahia.ajax.gwt.client.widget.ckeditor.CKEditor::editorInstance ;
        return oEditor.getData();
      }-*/;


    private native JavaScriptObject initEditor(String contextPath,String servletPath)/*-{
        var oCKeditor = new $wnd.CKEDITOR.replace(this.@org.jahia.ajax.gwt.client.widget.ckeditor.CKEditor::instanceId,{
            skin : 'jahia',
            filebrowserBrowseUrl : contextPath+'/engines/gwtcontentpicker/contentpicker.jsp?type=filepicker',
            filebrowserImageBrowseUrl : contextPath+'/engines/gwtcontentpicker/contentpicker.jsp?type=filepicker&mime=image/*',
            filebrowserFlashBrowseUrl : contextPath+'/engines/gwtcontentpicker/contentpicker.jsp?type=filepicker&mime=flash',
            filebrowserLinkBrowseUrl : contextPath+'/engines/gwtcontentpicker/contentpicker.jsp?type=linkpicker&contextPath='+contextPath+"&servletPath="+servletPath
        });
        var config = this.@org.jahia.ajax.gwt.client.widget.ckeditor.CKEditor::config;
        oCKeditor.Width = config.@org.jahia.ajax.gwt.client.widget.ckeditor.CKEditorConfig::getWidth()();
        oCKeditor.Height = config.@org.jahia.ajax.gwt.client.widget.ckeditor.CKEditorConfig::getHeight()();

        return oCKeditor;
      }-*/;

...
}
--------------------------------------

    To use the CKEditor as GWT widget you can simply add the following code:

--------------------------------------
...
CKEditor ck = new CKEditor();
...
--------------------------------------

    There is also a field wrapper, compatible with 'Form' component of GXT. It can be used thanks to the following code

--------------------------------------
...
Field fck = new CKEditorField();
...
--------------------------------------

* How the CKEditor instance is configured ?


    Actually, it's done directly in the method initEditor(...) of CKEditor class. For the next version, the configuration will be externalised.


* How are jahia-pickers integrated in CKEditor ?

  A new GWT module, ContentPicker.gwt.xml , allowing to display jahia-picker in a full page, has been added. The url of the 'stand alone' picker are specified in the CKEditor configuration:

--------------------------------------
private native JavaScriptObject initEditor(String contextPath,String servletPath)/*-{
        var oCKeditor = new $wnd.CKEDITOR.replace(this.@org.jahia.ajax.gwt.client.widget.ckeditor.CKEditor::instanceId,{
         ...
            filebrowserBrowseUrl : contextPath+'/engines/gwtcontentpicker/contentpicker.jsp?type=filepicker',
            filebrowserImageBrowseUrl : contextPath+'/engines/gwtcontentpicker/contentpicker.jsp?type=filepicker&mime=image/*',
            filebrowserFlashBrowseUrl : contextPath+'/engines/gwtcontentpicker/contentpicker.jsp?type=filepicker&mime=flash',
            filebrowserLinkBrowseUrl : contextPath+'/engines/gwtcontentpicker/contentpicker.jsp?type=linkpicker&contextPath='+contextPath+"&servletPath="+servletPath
        });
        ...

        return oCKeditor;
      }-*/;

...
}
--------------------------------------

    The url comming from the linpicker are encoded and has the following patterns: /${servletPath}/${contextPath}/{mode}/{lang}/...

    The encoding method used  org.jahia.ajax.gwt.client.util.URL.rewrite(...);

    Example:
    
--------------------------------------
  /jahia/cms/{mode}/{lang}/content/sites/ACME/home/page1.html
--------------------------------------

    The end-user can replace manually /{mode}/{lang}/ , remove it, or let jahia hanlde these 'place holders'.
