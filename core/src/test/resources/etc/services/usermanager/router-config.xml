<!--

    
    This file is part of Jahia: An integrated WCM, DMS and Portal Solution
    Copyright (C) 2002-2009 Jahia Limited. All rights reserved.
    
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.
    
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.
    
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
    
    As a special exception to the terms and conditions of version 2.0 of
    the GPL (or any later version), you may redistribute this Program in connection
    with Free/Libre and Open Source Software ("FLOSS") applications as described
    in Jahia's FLOSS exception. You should have recieved a copy of the text
    describing the FLOSS exception, and it is also available here:
    http://www.jahia.com/license"
    
    Commercial and Supported Versions of the program
    Alternatively, commercial and supported versions of the program may be used
    in accordance with the terms contained in a separate written agreement
    between you and Jahia Limited. If you are unsure which license is appropriate
    for your use, please contact the sales department at sales@jahia.com.

-->

<router-config>
    <!-- first we describe the list of user management providers. Order of the
         providers is not taken into account. Use criterias to define order
         of dispatching. -->
    <provider>
        <key>jahia_db</key>
        <class>org.jahia.services.usermanager.JahiaUserManagerDBProvider</class>
        <title>Jahia Default Database Provider</title>
        <description>
          This is the default database provider for Jahia. This uses an internal
          database format.
        </description>
        <!-- for the moment they may only be one provider set as the default but
             this is not tested so be careful when setting this value. Currently
             the parser will take the last true value as the default -->
        <is-default>true</is-default>
        <!-- are operations like update, delete allowed or not -->
        <is-readonly>false</is-readonly>
    </provider>
    <!--
    <provider>
        <key>ldap</key>
        <class>org.jahia.services.usermanager.JahiaUserManagerLDAPProvider</class>
        <title>LDAP Read-only provider</title>
        <description>
          This is an LDAP provider that allows Jahia to authentificate against
          existing repositories. It provides only read-only operations so we
          cannot create users in the repository or do property updates. Is also
          flexible enough to do property mapping for default jahia properties.
          check out the users.ldap.properties configuration file for this
          provider.
        </description>
        <is-default>false</is-default>
        <is-readonly>true</is-readonly>
    </provider>
    -->
    <!-- now we may define criteria for mapping to providers, these rules are
         executed in order of declaration. There may be multiple conditions
         per criteria, but this isn't used here for the moment. -->
    <criteria>
      <key>jahia_db_criteria</key>
      <description>
        Routes requests to jahia_db provider by testing the user key for a
        db prefix.
      </description>
      <!-- propertyValues allow the use of star characters as wildcard characters -->
      <condition propertyName="user.key" propertyValue="{db}*" />
      <provider-destination>jahia_db</provider-destination>
    </criteria>
    <!--
    <criteria>
      <key>ldap_criteria</key>
      <description>
        Routes requests to ldap provider by testing the user key for a
        ldap prefix.
      </description>
      <condition propertyName="user.key" propertyValue="{ldap}*" />
      <provider-destination>ldap</provider-destination>
    </criteria>
    -->
</router-config>
