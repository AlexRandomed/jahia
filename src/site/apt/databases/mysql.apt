MySQL tips for Jahia

* Database configuration

 Jahia uses BLOBs to store its data. Default MySQL installation may allow small packets only - check that the
 max_allowed_packet value is set to a value large enough :

+------------------------------
[mysqld]
...
max_allowed_packet = 100M
...
+------------------------------

 Jahia is using InnoDB for its database engine on MySQL so be sure that you have configure your MySQL for InnoDB.
 Here some default configuration for your database to be put in your my.cnf or my.ini file.

+------------------------------
#
# * InnoDB
#
# InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/.
# Read the manual for more InnoDB related options. There are many!
#

# You can write your other MySQL server options here
# ...
# Data files must be able to hold your data and indexes.
# Make sure that you have enough free disk space.
innodb_data_file_path = ibdata1:100M:autoextend
#
# Can be set to 70-80% of memory for dedicated InnoDB-Only MySQL
innodb_buffer_pool_size=1024M
innodb_additional_mem_pool_size=24M
#
# Set the log file size to about 25% of the buffer pool size
innodb_log_file_size=256M
innodb_log_buffer_size=64M
#
innodb_flush_log_at_trx_commit=1
+------------------------------


* MySQL on Mac OS X

 Please note that for MySQL versions from 5.5.9 to 5.5.12 on MacOSX, you must set the value
 of lower_case_table_names to 1 ({{http://bugs.mysql.com/bug.php?id=60309}}).

* MySQL on Unix

 According to ({{http://dev.mysql.com/doc/refman/5.0/en/innodb-tuning.html}}) in some versions of GNU/Linux and Unix, 
 flushing files to disk with the Unix fsync() call (which InnoDB uses by default) and other similar methods is 
 surprisingly slow. If you are dissatisfied with database write performance, you might try setting the <<<innodb_flush_method>>> 
 parameter to <<<O_DSYNC>>>. The <<<O_DSYNC>>> flush method seems to perform slower on most systems, but yours might not be one of them.

* Support of UTF-8 4 byte characters with MySQL

 If in you project you require to use UTF-8 4-byte characters ({{{http://en.wikipedia.org/wiki/UTF-8}UTF-8}}) in the JCR node names
 you need to enforce the server character set to <<<utf8mb4>>> instead of <<<utf8>>> and use the corresponding collation (<<<utf8mb4_general_ci>>>):
 
+------------------------------
character-set-server = utf8mb4
collation-server = utf8mb4_general_ci
+------------------------------

 The <<<characterEncoding=UTF-8>>> parameter should also be removed from the JDBC connection URL,
 i.e. instead of the default:
 
+------------------------------
 jdbc:mysql://localhost/jahia?useUnicode=true&characterEncoding=UTF-8&useServerPrepStmts=false
+------------------------------

 the following one should be used:
 
+------------------------------
 jdbc:mysql://localhost/jahia?useUnicode=true&useServerPrepStmts=false
+------------------------------

 Note, please, this requirement is only applicable to JCR node names only.
 There is no issue at all with the node property values (content), having UTF-8 4 byte characters.
