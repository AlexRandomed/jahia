Node validation

* Using validation framework

 Jahia supports {{{http://www.jahia.com/cms/home/community/documentation/templating-and-integration-guide/part-4-content-definitions-and-v/definitons/validators.html}value constraints}},
 which can be defined in the standard CND (Compact Namespace and Node Type Definition) file. This is already quite
 powerful and sufficient in most cases. But if you need more complex or custom constraints, like cross-field validation,
 you can use {{{http://static.springsource.org/spring/docs/current/spring-framework-reference/html/validation.html#validation-beanvalidation-overview}JSR-303 Bean Validation}}.

 This is done in Jahia by declaring a {{{./decorators.html}node decorator}} and annotating its getters with validation
 constraints. Note that the getters names should match a property name if it makes sense, (replace ':' with '_') so that
 the system recognize which jcr property violates the constraint. When using custom annotation, it is also possible to
 specify the name of the jcr property directly in an annotation field named <<<propertyName>>>. This is also useful for
 class level constraints which apply on multiple fields, to specify which field to focus on when the error occurs.

 So for example, with the following definition  :

+-------------
[test:validatedNode] > nt:base, jmix:droppableContent
- test:sizeBetween6And20 (string)
- test:email (string)
- test:futureDate (date)
+-------------

 You could have a node decorator like :

+-------------
public class TestValidatedNodeDecorator extends JCRNodeDecorator {

    public TestValidatedNodeDecorator(JCRNodeWrapper node) {
        super(node);
    }

    @Size(min = 6, max = 20)
    public String getTest_sizeBetween6And20() {
        return getPropertyAsString("test:sizeBetween6And20");
    }

    @Email
    public String getTest_email() {
        return getPropertyAsString("test:email");
    }

    @Future
    public Calendar getTest_futureDate() {
        try {
            JCRPropertyWrapper property = getProperty("test:futureDate");
            if (property != null) {
                return property.getDate();
            }
        } catch (RepositoryException e) {
            logger.error(e.getMessage());
        }
        return null;
    }

}
+-------------

* Custom validators

 A custom annotation, checking that multiple fields match, can be declared this way :

+-------------
    @Target({TYPE, ANNOTATION_TYPE})
    @Retention(RUNTIME)
    @Constraint(validatedBy = FieldMatchValidator.class)
    @Documented
    public @interface FieldMatch {

        String message() default "{validation.constraints.fieldmatch}";

        Class<?>[] groups() default {};

        Class<? extends Payload>[] payload() default {};

        String propertyName() default "";

        String first();

        String second();

        @Target({TYPE, ANNOTATION_TYPE})
        @Retention(RUNTIME)
        @Documented
        @interface List {
            FieldMatch[] value();
        }
    }
+-------------

 One can use it this way :

+-------------
 @FieldMatch(first = "firstField", second = "secondField", propertyName = "j:firstField")
 public class MyNodeDecorator extends JCRNodeDecorator {
  ...
 }
+-------------

* Constraints validation mechanism

  The validation is done during the session save and raises a subtype of <<<javax.jcr.nodetype.ConstraintViolationException>>> when
  it fails. The exception contains reference to the node and the definition of the field which violates the constraint. In the
  edit engine, that field will be highlighted and the constraint error message is displayed.

  When you create or edit a node by doing a {{{../jahia-modules/rest.html#HTTP Post Request}HTTP Post Request}} and the
  validation fails, it returns a JSON object with a property <<<validationError>>> containing a list of objects with
  some useful properties : the error message, the node identifier, the property name and its localized label if applicable.
