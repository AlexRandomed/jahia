Workflow Integration

 Jahia works with a business process engine to manage its workflows. It is mainly used for publication operation, which usually
 require user validation and eventual interaction with external systems. However, it is possible to use the process
 engine for other operations, either operations related to Jahia, or purely business oriented workflow.

 Jahia is bundled and configured with the jBPM process engine.

* Using the workflow

  Workflow can be started and executed on a node. Workflow are always tied to a node - it can be a page, user, or any
  simple node - workflow rules (which workflow can be started) and roles (who can execute the tasks)
  will be set on these nodes, or on parent nodes, and are inherited on all sub nodes.

** Workflow rules

  Workflow rules define which workflow can be started on which node. This can be set in the workflow tab of the edit
  engine.

[../images/workflow/workflow-engine.png]

  For every workflow type listed on the left, a drop-down menu allows to select (or deselect) a workflow. The "same
  workflow as parent" checkbox must be unchecked to select a new workflow.

  Once saved, the workflow will be available for the users having the permission to start it.

** {Roles}

  Workflow is about interaction between users - some users can start a workflow, which will require other action by
  other users. Jahia permissions and roles allow to set up the possible actions for every user and group in the system.

  When declaring a workflow, a mapping between workflow actions and Jahia permissions is defined. In order to start a
  workflow or being able to assign and execute a task, a user must have the matching permission, via a role.
  If no specific mapping is specified, a permission is automatically created for every task in <</permissions/workflow-tasks/>>.
  See {{Workflow declaration}} on how to declare a workflow and a custom permission mapping.

  Workflow permissions, like other permissions, are assigned to roles via the roles manager in the administration :

[../images/workflow/roles-manager.png]

  Users and groups are assigned to roles with the Roles tab of the edit engine.

[../images/workflow/roles2.png]

** Starting and executing the workflow

  Once a workflow rule has been set, a user who has the right to start a workflow on a node should see it in the
  workflow / start workflow menu :

[../images/workflow/workflow-start.png]

  A workflow will probably create tasks that will be assigned to users who have a role matching the required permissions.
  A user who has waiting task can execute them by opening his dashboard in workflow / Workflow Dashboard :

[../images/workflow/dashboard.png]

  A user can also check and execute its tasks in the "My tasks" section of the start page.

* {Using} jBPM

  For more information about jBPM, see {{http://www.jboss.org/drools/documentation}} .

** jBPM configuration

   The jBPM provider configuration file is the following :

+-------------------------
 WEB-INF/etc/spring/workflow/applicationcontext-jBPM.xml
+-------------------------

   This file contains references to other services, the path used by jBPM to get the process definitions, and location
   of the jBPM configfile.

   The JBPMModuleProcessLoader bean, which is loaded in the context of every module, defines where the system will look
   for the process definition files. This bean is defined in :

+-------------------------
 WEB-INF/etc/spring/modules-applicationcontext-registry.xml
+-------------------------

** Declaring a workflow in jBPM

   As you can see in the jBPM configuration file, we use a wildcard classpath lookup to search for the BPMN workflow
   process definition files. This means that you can simply put in your module in the proper package (by default under
   <<<org.jahia.modules>>>) a file with the extension bpmn2 and it will be picked-up on Jahia's startup.
   In order to be available in Jahia, the process must also be declared in a configuration file - see {{Workflow declaration}}

** jBPM forms

   jBPM allows to associate a form to a task - in Jahia, this form is actually defined by a simple node type. This node
   type will create the form, and the data will be stored like a standard JCR node in the process engine.

   Here, the "request" task uses the "jnt:translationRequest" as a form :

+--------------------
     <task name="request" form="jnt:translationRequest">
        ...
+--------------------

   The type jnt:translationRequest is defined in a .cnd file with :

+--------------------
[jnt:translationRequest] > mix:title
- request (string, richtext)
- translateTo (string, choicelist[siteLocales])
+--------------------

   The execution of this task will display a form that the user will need to fill. Data entered in this form can later
   be used in other work items.

** jBPM task assignation

   jBPM needs to know how to assign new tasks to users when the task is created. Depending on the roles assigned to the
   node, the task won't be assigned to the same users and groups. Jahia will automatically assign the task to the users
   or groups who have the correct permission when the task is created.
   Subsequent changes to the roles won't be visible for existing tasks.

** Using jBPM customs work items handlers

   At one point of the process, it can be required that the process need to interact with Jahia services. For instance,
   a publication workflow will probably need to publish some nodes after a validation. There's multiple ways to do this
   with jBPM, but the simplest way is to create custom handlers - a few handlers are provided with Jahia,
   to lock/unlock nodes and publish/unpublish nodes. They are located in org.jahia.services.workflow.jbpm.custom.* .

   {{http://docs.jboss.com/jbpm/v4/userguide/html_single/#custom}}

   Handlers need to be registered in your module spring file with a name, which will be used in the bpmn files in the
   drools:taskName property of a task. For instance, the following handler can be defined :

+--------------------
    <bean id="unlockWH" parent="abstractWH" class="org.jahia.services.workflow.jbpm.custom.UnlockWorkItemHandler">
        <property name="name" value="Unlock node"/>
    </bean>
+--------------------

   And it will be used in a process by the following task :

+--------------------
    <bpmn2:task id="Task_16" drools:taskName="Unlock node" name="Unlock the node">
+--------------------

** Internationalize workflow labels

   An optional resource bundle file can be created along with the bpmn file to internationalize the name and labels
   of the process - the resource bundle must be named with the key of the jBPM process. If the process has the key
   "translation-workflow", the file need to be named translation-workflow.properties . This file can include
   resources for process name, actions, and action outcomes. You can also specified a key for completed tasks, add
   ".completed" to the task key.

** Sending mail with jBPM

  Sending a mail can be done by using the "Send mail" task handler provided by Jahia. You can define a task
  as in the following example :

+--------------------
   <bpmn2:task id="Task_13" drools:taskName="Send mail" name="Send Mail">
+--------------------

  This task require a few inputs variables to send a mail :

  * user : The user initiating the workflow

  * currentUser : The user whi has executed the last task

  * templateKey : Name of the mail template to use

  * workflow : The workflow definition

  * nodeIds : The list of nodes on which the workflow has been started

  * locale : The locale on which the workflow has been started

  * workspace : The workspace on which the workflow has been started

  The templateKey input will define which template will be used to send a mail.
  Mail templates are found like workflows, in a path specified in the JBPMModuleProcessLoader bean.
  By default all resources in the package <<<org.jahia.modules>>> with the extension <<<.mail>>> are taken.
  The following example, <<<start-publication-template.mail>>> , defines a mail that will be sent
  when we start a publication workflow :

+--------------------------------
to: #if( $user.properties.get('j:email') ) ${user.properties.get('j:email')} #end
to-users: nextTaskAssignable
subject: Publication workflow by ${user.getUsername()}
text: Hi,

A publication workflow with one validation step has been started on ${date.format("short","short",$submissionDate,$locale)} by ${user.getUsername()}, on the following items :
#foreach( $node in $nodes )
#if( $velocityCount <= 10)
    - ${node.getDisplayableName()}
#end
#end

html: Hi,
<br>
<br>
<div>
A publication workflow with one validation step has been started on ${date.format("short","short",$submissionDate,$locale)} by ${user.getUsername()}, on the following items :
</div>
<div>
    <ul>
#foreach( $node in $nodes )
    #if( $velocityCount <= 10)
    <li>${node.getDisplayableName()}</li>
    #end
#end
    </ul>
    <br>
</div>
+--------------------------------

  The template contains both text and html versions of the mails, and use velocity language to get dynamic informations.
  Another script language (as defined by the JSR 223) can be used by using the key <<language:>> in the template file.
  The following variables are bound when executing the script : <<bundle>>, <<user>>, <<currentUser>>, <<date>>, <<submissionDate>>,
  <<locale>>, <<workspace>>, <<nodes>>.

  It is also possible to declare one template per locale, by suffixing the template name by the language code :
  start-publication-template.fr.mail will be used when the workflow locale is french.

* {Workflow declaration}

  Workflow processes need to be deployed into the process engine and declared in Jahia to be used by the site
  administrator and end-users.

  See "{{{#Using}Using jBPM}}" for information about how to create and
  deploy process with the jBPM process engine.

  Once the workflow is available in the process engine, it has to be registered to the workflow service. This can
  be done by creating a spring bean <<<org.jahia.services.workflow.WorklowTypeRegistration>>> in the module.
  This bean has to declare multiple properties :

  * <<definition>> : the key of the process definition, as declared in jBPM.

  * <<type>> : the type of workflow , like publish , unpublish , or any other name.  Each workflow need to be
    associated to a workflow type . Only one workflow per type can be associated to a node - for example, if
    multiple publication workflow exist, one need to be choosed at a specific level.

  * <<forms>> : a map from task name to task data node type. If a node type is associated to a task, a task data node
    will be created under the task, and will be available for modification by the user completing the task. The task
    data can be filled with task input parameters, and its values can also be mapped with output parameters to the
    process variables. In the user dashboard from edit mode, a form based on that node type will be displayed to the
    user when he will complete the task. In the "my tasks" components, the task data node is displayed with the view
    "taskData" of this type.

  * <<permissions>> : This is an optional map defining the mapping between workflow actions and Jahia permissions. The map contains
       the workflow action as the key, and the permission full path as the value. A user need to be part of a role
       containing that permission to be able to execute the workflow action (see {{Roles}}). Note that the permission name to use
       can be based on a custom variable that has been set previously in the workflow context : in the translationWorkflow,
       the permission <<<jcr:modifyProperties_default_$translateTo>>> will be replaced by jcr:modifyProperties_default_en if the
       variable <<<translateTo>>> has been set to <<<en>>>.
       If no permission is defined for a task, a specific permission will be automatically created.

  * <<canBeUsedForDefault>> : If the workflow definition will be available by default on all nodes, without having to setup
    a workflow rule.

  * <<defaultPriority>> : If multiple workflows have "canBeUsedForDefault" , the one with the highest priority will be taken.

+----------------
    <bean class="org.jahia.services.workflow.WorklowTypeRegistration">
        <property name="type" value="unpublish"/>
        <property name="definition" value="1-step-unpublication"/>
        <property name="forms">
            <map>
                <entry key="start" value="jnt:simpleWorkflow"/>
                <entry key="unpublish" value="jnt:simpleWorkflow"/>
            </map>
        </property>
    </bean>
+----------------

* Configuring new workflow providers

  Jahia's workflow service uses an external back-end, by default the jBPM workflow implementation, but that can be replaced
  by other implementations if need be.

  Adding a new provider can be done by implementing the interface org.jahia.services.workflow.WorkflowProvider. The
  provider must provide a key and need to register to the service at startup. A spring bean can be used to declare and
  instantiate the new provider. The <<<JBPMProvider>>> , used to connect to the jBPM engine, can be used as an example. The
  provider is registered via the spring file <<<applicationcontext-jBPM.xml>>> .

