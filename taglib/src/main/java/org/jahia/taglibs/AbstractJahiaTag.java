/**
 * 
 * This file is part of Jahia: An integrated WCM, DMS and Portal Solution
 * Copyright (C) 2002-2009 Jahia Limited. All rights reserved.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 * 
 * As a special exception to the terms and conditions of version 2.0 of
 * the GPL (or any later version), you may redistribute this Program in connection
 * with Free/Libre and Open Source Software ("FLOSS") applications as described
 * in Jahia's FLOSS exception. You should have received a copy of the text
 * describing the FLOSS exception, and it is also available here:
 * http://www.jahia.com/license
 * 
 * Commercial and Supported Versions of the program
 * Alternatively, commercial and supported versions of the program may be used
 * in accordance with the terms contained in a separate written agreement
 * between you and Jahia Limited. If you are unsure which license is appropriate
 * for your use, please contact the sales department at sales@jahia.com.
 */

package org.jahia.taglibs;

import org.apache.log4j.Logger;
import org.jahia.data.JahiaData;
import org.jahia.data.beans.I18nBean;
import org.jahia.data.beans.JahiaBean;
import org.jahia.data.beans.TemplatePathResolverBean;
import org.jahia.exceptions.JahiaException;
import org.jahia.params.ProcessingContext;
import org.jahia.registries.ServicesRegistry;
import org.jahia.resourcebundle.ResourceBundleDefinition;
import org.jahia.resourcebundle.ResourceBundleMarker;
import org.jahia.resourcebundle.ResourceBundleService;
import org.jahia.taglibs.template.templatestructure.TemplateTag;
import org.jahia.taglibs.utility.Utils;

import javax.servlet.ServletRequest;
import javax.servlet.jsp.PageContext;
import javax.servlet.jsp.tagext.BodyTagSupport;
import javax.servlet.jsp.tagext.Tag;
import javax.servlet.jsp.tagext.TagSupport;
import java.util.Locale;
import java.util.Stack;

/**
 * This abstract Tag is the starting point for implementing any knew tags. In contains common attributes that should be
 * used in the implementation of the derived tags. For instance, the 'xhtmlCompliantHtml' is used to know if the tag
 * should render XHTML compliant html or simple basic html.</br>
 * The same is true regarding the 'resourceBundle' attribute. Instead of having to set the name of the resource bundle
 * file for all Jahia tags, it is much more convenient to set it once, at the beginning of the template, and then simply
 * fetching this set values.
 *
 * @author Xavier Lawrence
 */
@SuppressWarnings("serial")
public class AbstractJahiaTag extends BodyTagSupport {

    public static final String PARENT_TAG_REQUEST_ATTRIBUTE = "parentContainerTag";
    public static final String PARENT_BUNDLE_REQUEST_ATTRIBUTE = "parentBundleTag";
    public static final String TEMPLATE_PATH = "/jsp/jahia/templates/";
    public static final String COMMON_TAG_BUNDLE = "CommonTag";

    private static final transient Logger logger = Logger.getLogger(AbstractJahiaTag.class);

    /**
     * Name of the resourceBundle all tags derived from this class will use.
     */
    private String resourceBundle;

    /**
     * The key of the resource bundle all tags derived from this class will use.
     *
     * @see ResourceBundleService
     */
    private String bundleKey;


    /**
     * If set to 'true' the output generated by the tag will be XHTML compliant, otherwise it will be
     * HTML compliant
     */
    protected boolean xhtmlCompliantHtml;

    /**
     * The languageCode attribute keeps track of the current language
     */
    protected String languageCode;

    /**
     * The CSS class the surrounding div or span element will have
     */
    protected String cssClassName;

    public String getResourceBundle() {
        if (null == resourceBundle) {
            retrieveResourceBundle();
        }

        return resourceBundle;
    }

    protected I18nBean getI18n() {
        return getI18n(getResourceBundle());
    }

    protected I18nBean getI18n(String bundleName) {
        return Utils.getJahiaBean(pageContext, true).getI18nBundles().get(bundleName);
    }

    protected I18nBean getI18n(String bundleName, Locale locale) {
        return I18nBean.getInstance(bundleName, locale, getProcessingContext());
    }

    protected String getResourceValue(final String key, final ProcessingContext jParams) {
        return getI18n(getResourceBundle(), jParams.getLocale()).get(key);
    }

    protected String getI18nMessage(String key) {
        return getI18n().get(key);
    }

    public void setResourceBundle(String resourceBundle) {
        this.resourceBundle = resourceBundle;
    }

    public boolean isXhtmlCompliantHtml() {
        return xhtmlCompliantHtml;
    }

    public void setXhtmlCompliantHtml(boolean xhtmlCompliantHtml) {
        this.xhtmlCompliantHtml = xhtmlCompliantHtml;
    }

    public String getLanguageCode() {
        return languageCode;
    }

    public void setLanguageCode(String languageCode) {
        this.languageCode = languageCode;
    }

    public String getCssClassName() {
        return cssClassName;
    }

    public void setCssClassName(String cssClassName) {
        this.cssClassName = cssClassName;
    }

    protected final Tag findAncestorWithClass(final Tag tag,
                                              final Class aClass,
                                              final ServletRequest request) {
        if (tag == null || aClass == null ||
                (!Tag.class.isAssignableFrom(aClass) && !(aClass.isInterface()))) {
            return null;
        }

        Tag result = TagSupport.findAncestorWithClass(this, aClass);
        if (result == null) {
            Stack<Tag> stack = (Stack<Tag>) pageContext.getRequest().getAttribute(PARENT_TAG_REQUEST_ATTRIBUTE);
            if (stack != null) {
                Tag[] tags = stack.toArray(new Tag[stack.size()]);
                int pos = stack.indexOf(this);
                for (int i = pos; i >= 0; i--) {
                    Tag ancestor = tags[i];
                    if (aClass.isInstance(ancestor) && ancestor != this) {
                        return ancestor;
                    }
                }
            }
        }
        return result;
    }

    public void pushTag() {
        Stack<Tag> stack = (Stack<Tag>) pageContext.getRequest().getAttribute(PARENT_TAG_REQUEST_ATTRIBUTE);
        if (stack == null) {
            stack = new Stack<Tag>();
            pageContext.getRequest().setAttribute(PARENT_TAG_REQUEST_ATTRIBUTE, stack);
        }
        stack.push(this);
    }

    public void popTag() {
        Stack<Tag> stack = (Stack<Tag>) pageContext.getRequest().getAttribute(PARENT_TAG_REQUEST_ATTRIBUTE);
        stack.pop();
    }

    public static String resolveIncludeFullPath(final PageContext pageContext,
                                                final String fileName) {
        final TemplatePathResolverBean templatePath = Utils.getJahiaBean(pageContext).getIncludes().getTemplatePath();
        return templatePath.lookup(fileName);
    }

    protected String resolveTitle(final String title,
                                  final String bundleKey,
                                  final String titleKey,
                                  final Locale locale) {
        if ((titleKey != null) && (bundleKey != null)) {
            return ResourceBundleMarker.getValue(title, bundleKey, titleKey, locale);
        } else {
            if (title != null)
                return title;
            else
                return "";
        }
    }

    /**
     * Retrieve the parent resource bundle if any and if the current one is null.
     * This has to be called in subtags of TemplateTag (any tag within a template should do actually).
     */
    private void retrieveResourceBundle() {
        // retrieve the parent resource bundle
        if (resourceBundle == null) {
            final TemplateTag templateTag = (TemplateTag) findAncestorWithClass(this, TemplateTag.class);
            if (templateTag != null) {
                resourceBundle = templateTag.getResourceBundle();
            } else {
                resourceBundle = (String) pageContext.getRequest().getAttribute(PARENT_BUNDLE_REQUEST_ATTRIBUTE);
            }
        }
        // if not found, try the template set resource bundle
        if (resourceBundle == null) {
            JahiaBean jBean = Utils.getJahiaBean(pageContext, true);
            resourceBundle = jBean != null ? jBean.getI18n().getBundleName() : null;
        }
        // if not found, fall back to the common resource bundle
        if (resourceBundle == null) {
            resourceBundle = COMMON_TAG_BUNDLE;
        }
    }

    private void retrieveBundleKey() {
        if (bundleKey == null) {
            ResourceBundleDefinition def = null;
            try {
                def = ServicesRegistry.getInstance().getResourceBundleService()
                        .getResourceBundleFromName(getResourceBundle());
            } catch (JahiaException e) {
                logger.warn("Unable to lookup a resource bundle for name: "
                        + getResourceBundle(), e);
            }
            if (def != null) {
                bundleKey = def.getResourceBundleID();
            }
        }
    }

    /**
     * Returns an {@link JahiaBean} instance with current Jahia data.
     *
     * @return an {@link JahiaBean} instance with current Jahia data
     */
    protected JahiaBean getJahiaBean() {
        return getJahiaBean(false);
    }

    /**
     * Returns an {@link JahiaBean} instance with current Jahia data.
     *
     * @param createIfNotFound will create the bean if it is not found
     * @return an {@link JahiaBean} instance with current Jahia data
     */
    protected JahiaBean getJahiaBean(boolean createIfNotFound) {
        return Utils.getJahiaBean(pageContext, createIfNotFound);
    }

    /**
     * Returns current {@link ProcessingContext} instance.
     *
     * @return current {@link ProcessingContext} instance
     */
    protected ProcessingContext getProcessingContext() {
        return Utils.getProcessingContext(pageContext);
    }

    /**
     * Returns current {@link JahiaData} instance.
     *
     * @return current {@link JahiaData} instance
     */
    protected JahiaData getJahiaData() {
        return (JahiaData) pageContext.getAttribute("org.jahia.data.JahiaData",
                PageContext.REQUEST_SCOPE);
    }

    protected String resolveIncludeFullPath(final String fileName) {
        return resolveIncludeFullPath(pageContext, fileName);
    }

    protected String extractDefaultValue(final String value) {
        if (value.startsWith("<jahia-resource")) {
            final int keyIndex = value.indexOf("default-value=");
            final String tmp = value.substring(keyIndex + 15);
            int whiteSpaceIndex = tmp.indexOf("\"");
            if (whiteSpaceIndex < 0) {
                whiteSpaceIndex = tmp.indexOf("'");
            }
            return tmp.substring(0, whiteSpaceIndex);

        } else {
            return value;
        }
    }

    protected String getValueFromResourceBundleMarker(final String value) {
        final ResourceBundleMarker marker = ResourceBundleMarker.parseMarkerValue(value);
        if (marker == null) return value;
        try {
            return marker.getValue(getProcessingContext().getLocale());
        } catch (JahiaException je) {
            return marker.getDefaultValue();
        }
    }

    /**
     * Simply utility method in order to extract the key value from a String
     * made of a resource bundle marker.<br/> <p/> i.e: <br/> Extracts the value
     * 'files' from the String below: <br/> <jahia-resource id="DEFAULT_V3_LANG"
     * key="files" default-value="files"/>
     */
    protected String extractKey(final String value) {
        if (value != null && value.startsWith("<jahia-resource")) {
            final int keyIndex = value.indexOf("key=");
            final String tmp = value.substring(keyIndex + 5);
            int whiteSpaceIndex = tmp.indexOf("\"");
            if (whiteSpaceIndex < 0) {
                whiteSpaceIndex = tmp.indexOf("'");
            }
            return tmp.substring(0, whiteSpaceIndex);

        } else {
            return value;
        }
    }

    protected void resetState() {
        cssClassName = null;
        languageCode = null;
        resourceBundle = null;
        bundleKey = null;
        xhtmlCompliantHtml = false;
    }

    public String getBundleKey() {
        if (null == bundleKey) {
            retrieveBundleKey();
        }
        return bundleKey;
    }

    public void setBundleKey(String bundleKey) {
        this.bundleKey = bundleKey;
    }

    protected boolean isLogged() {
        final JahiaBean jBean = (JahiaBean) pageContext.getAttribute("jahia", PageContext.REQUEST_SCOPE);
        return jBean.getRequestInfo().isLogged();
    }

    @Override
    public void release() {
        resetState();
        super.release();
    }

}
