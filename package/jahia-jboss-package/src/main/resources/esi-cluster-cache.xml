<?xml version="1.0" encoding="UTF-8"?>

<!-- ===================================================================== -->
<!--                                                                       -->
<!--  Sample TreeCache Service Configuration                               -->
<!--                                                                       -->
<!-- ===================================================================== -->

<server>

    <classpath codebase="./lib" archives="jboss-cache.jar, jgroups.jar"/>


    <!-- ==================================================================== -->
    <!-- Defines TreeCache configuration                                      -->
    <!-- ==================================================================== -->

    <mbean code="org.jboss.cache.TreeCache"
        name="jboss.cache:service=TreeCache">

        <depends>jboss:service=Naming</depends>
        <depends>jboss:service=TransactionManager</depends>

        <!--
        Configure the TransactionManager
    -->
        <attribute name="TransactionManagerLookupClass">org.jboss.cache.GenericTransactionManagerLookup</attribute>
	<!--
            Node locking scheme:
                OPTIMISTIC
                PESSIMISTIC (default)
        -->
        <attribute name="NodeLockingScheme">OPTIMISTIC</attribute>
        <!--
            Isolation level : SERIALIZABLE
                              REPEATABLE_READ (default)
                              READ_COMMITTED
                              READ_UNCOMMITTED
                              NONE
        -->
        <attribute name="IsolationLevel">READ_UNCOMMITTED</attribute>

        <!--
             Valid modes are LOCAL
                             REPL_ASYNC
                             REPL_SYNC
                             INVALIDATION_ASYNC
                             INVALIDATION_SYNC
        -->
        <attribute name="CacheMode">INVALIDATION_SYNC</attribute>

        <!--
        Just used for async repl: use a replication queue
        -->
        <attribute name="UseReplQueue">false</attribute>

        <!--
            Replication interval for replication queue (in ms)
        -->
        <attribute name="ReplQueueInterval">0</attribute>

        <!--
            Max number of elements which trigger replication
        -->
        <attribute name="ReplQueueMaxElements">0</attribute>

        <!--
         Whether or not to fetch state on joining a cluster
         NOTE this used to be called FetchStateOnStartup and has been renamed to be more descriptive.
        -->
        <attribute name="FetchInMemoryState">false</attribute>

        <!--
            The max amount of time (in milliseconds) we wait until the
            initial state (ie. the contents of the cache) are retrieved from
            existing members in a clustered environment
        -->
        <attribute name="InitialStateRetrievalTimeout">60000</attribute>

        <!--
            Number of milliseconds to wait until all responses for a
            synchronous call have been received.
        -->
        <attribute name="SyncReplTimeout">10000</attribute>

        <!-- Max number of milliseconds to wait for a lock acquisition -->
        <attribute name="LockAcquisitionTimeout">1000</attribute>

        <!-- Name of the eviction policy class. -->
        <attribute name="EvictionPolicyClass"></attribute>

       <!--
          Indicate whether to use region based marshalling or not. Set this to true if you are running under a scoped
          class loader, e.g., inside an application server. Default is "false".
       -->
        <attribute name="UseRegionBasedMarshalling">true</attribute>

        <attribute name="CacheLoaderConfiguration">
            <config>
                <passivation>false</passivation>
                <preload>/</preload>
                <shared>false</shared>

                <cacheloader>
                    <class>org.jboss.cache.loader.ClusteredCacheLoader</class>
                    <properties>
                        timeout=1000
                    </properties>
                    <async>false</async>
                    <fetchPersistentState>false</fetchPersistentState>
                    <!-- determines whether this cache loader ignores writes - defaults to false. -->
                    <ignoreModifications>false</ignoreModifications>
                    <!-- if set to true, purges the contents of this cache loader when the cache starts up.
                    Defaults to false.  -->
                    <purgeOnStartup>false</purgeOnStartup>
                </cacheloader>
            </config>
        </attribute>
    </mbean>
</server>
