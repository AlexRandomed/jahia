<?xml version="1.0" encoding="UTF-8"?>
<!-- ===================================================================== -->
<!--                                                                       -->
<!--  Sample TreeCache Service Configuration                               -->
<!--                                                                       -->
<!-- ===================================================================== -->
<server>
    <classpath codebase="./lib" archives="jboss-cache.jar, jgroups.jar"/>
    <!-- ==================================================================== --><!-- Defines TreeCache configuration                                      --><!-- ==================================================================== -->
    <mbean code="org.jboss.cache.TreeCache"
           name="jboss.cache:service=TreeCache">
        <depends>jboss:service=Naming</depends>
        <depends>jboss:service=TransactionManager</depends>
        <!--
            Configure the TransactionManager
        -->
        <attribute name="TransactionManagerLookupClass">org.jboss.cache.GenericTransactionManagerLookup</attribute>
        <attribute name="NodeLockingScheme">OPTIMISTIC</attribute>
        <!--
             Valid modes are LOCAL
                             REPL_ASYNC
                             REPL_SYNC
        -->
        <attribute name="CacheMode">LOCAL</attribute>
        <!-- Name of cluster. Needs to be the same for all clusters, in order
             to find each other
        -->
        <!--
            The max amount of time (in milliseconds) we wait until the
            initial state (ie. the contents of the cache) are retrieved from
            existing members in a clustered environment
        -->
        <attribute name="InitialStateRetrievalTimeout">20000</attribute>
        <!--
            Number of milliseconds to wait until all responses for a
            synchronous call have been received.
        -->
        <attribute name="SyncReplTimeout">20000</attribute>
        <!-- Max number of milliseconds to wait for a lock acquisition -->
        <attribute name="LockAcquisitionTimeout">15000</attribute>
        <!-- Name of the eviction policy class. -->
        <attribute name="EvictionPolicyClass">org.jboss.cache.eviction.LRUPolicy</attribute>
        <!-- Specific eviction policy configurations. This is LRU -->
        <attribute name="EvictionPolicyConfig">
            <config>
                <attribute name="wakeUpIntervalSeconds">5</attribute>
                <!-- Cache wide default -->
                <region name="/_default_">
                    <attribute name="maxNodes">10000</attribute>
                    <attribute name="timeToLiveSeconds">15000</attribute>
                </region>
            </config>
        </attribute>
        <!-- New 1.3.x cache loader config block -->
        <!--<attribute name="CacheLoaderConfiguration">
            <config>
                --><!-- if passivation is true, only the first cache loader is used; the rest are ignored --><!--
                <passivation>false</passivation>
                <preload>/</preload>
                <shared>false</shared>
                --><!-- we can now have multiple cache loaders, which get chained --><!--
                <cacheloader>
                    <class>org.jboss.cache.loader.JDBCCacheLoader</class>
                    --><!-- same as the old CacheLoaderConfig attribute --><!--
                    <properties>
                        cache.jdbc.datasource=java:/comp/env/jdbc/jahia
                        cache.jdbc.table.drop=false
                        cache.jdbc.node.type=bytea
                        cache.jdbc.table.name=esi_jbosscache
                    </properties>
                    --><!-- whether the cache loader writes are asynchronous --><!--
                    <async>false</async>
                    --><!-- only one cache loader in the chain may set fetchPersistentState to true.
                         An exception is thrown if more than one cache loader sets this to true. --><!--
                    <fetchPersistentState>true</fetchPersistentState>
                    --><!-- determines whether this cache loader ignores writes - defaults to false. --><!--
                    <ignoreModifications>false</ignoreModifications>
                    --><!-- if set to true, purges the contents of this cache loader when the cache starts up.
                         Defaults to false.  --><!--
                    <purgeOnStartup>false</purgeOnStartup>
                </cacheloader>
            </config>
        </attribute>-->
    </mbean>
</server>