mutation {
    jcr {
        # Mutate permissions if workflow-dashboard-access does not exist yet
        workflowPermissions: mutateNodesByQuery(query: "/jcr:root/permissions/workflow-tasks[not(workflow-dashboard-access/@jcr:primaryType='jnt:permission')]", queryLanguage:XPATH) {
            # Create new workflow permission
            addChild(name: "workflow-dashboard-access", primaryNodeType: "jnt:permission") {
                uuid
            }
        }

        # Mutate permissions if workflow-dashboard-access does not exist yet
        jContentPermissions: mutateNodesByQuery(query: "/jcr:root/permissions[not(jContent/@jcr:primaryType='jnt:permission')]", queryLanguage:XPATH) {
            # Create new jContent permission
            addChildrenBatch(nodes:[
                {name:"jContent", primaryNodeType:"jnt:permission", children: [
                    {name:"jContentAccess", primaryNodeType:"jnt:permission"},
                    {name:"jContentActions", primaryNodeType:"jnt:permission"},
                ]},
                {name:"legacy-permissions", primaryNodeType:"jnt:permission"}
            ]) {
                uuid
            }

            # Move old permissions
            editMode: mutateChildren(names:"editMode") {
                move1: mutateChildren(names:"editModeActions") {
                    mutateChildren(names:"createPageAction") {
                        move(parentPathOrId:"/permissions/jContent/jContentActions")
                    }
                }

                move2: mutateChildren(names:["useComponent", "engineTabs"]) {
                    mutateChildren(names:"viewContributeModeTab") {
                        rename(name: "viewContentTypeRestrictionTab")
                    }
                    move(parentPathOrId:"/permissions/jContent")
                }

                move3: move(parentPathOrId:"/permissions/legacy-permissions")
            }

            contributeMode: mutateChildren(names:"contributeMode") {
                move(parentPathOrId:"/permissions/legacy-permissions")
            }
        }

        mutateNode(pathOrId: "/permissions/legacy-managers") {
            delete
        }

        # Update all existing roles
        updateRoles1: mutateNodesByQuery(query: "select * from [jnt:role] where [j:permissionNames]='editMode'", queryLanguage: SQL2) {
            mutateProperty(name: "j:permissionNames") {
                removeValue(value: "editMode")
                addValue(value: "jContent")
            }
        }

        updateExternalPermissions1: mutateNodesByQuery(query: "select * from [jnt:externalPermissions] where [j:permissionNames]='editMode'", queryLanguage: SQL2) {
            mutateProperty(name: "j:permissionNames") {
                removeValue(value: "editMode")
                addValue(value: "jContent")
            }
        }

        updateRoles2: mutateNodesByQuery(query: "select * from [jnt:role] where [j:permissionNames]='editModeAccess' or [j:permissionNames]='contributeModeAccess' or [j:permissionNames]='contributeMode'", queryLanguage: SQL2) {
            mutateProperty(name: "j:permissionNames") {
                removeValues(values: ["editModeAccess", "contributeModeAccess", "contributeMode"])
                addValue(value: "jContentAccess")
            }
        }

        updateExternalPermissions2: mutateNodesByQuery(query: "select * from [jnt:externalPermissions] where [j:permissionNames]='editModeAccess' or [j:permissionNames]='contributeModeAccess' or [j:permissionNames]='contributeMode'", queryLanguage: SQL2) {
            mutateProperty(name: "j:permissionNames") {
                removeValues(values: ["editModeAccess", "contributeModeAccess", "contributeMode"])
                addValue(value: "jContentAccess")
            }
        }

        updateRoles3: mutateNodesByQuery(query: "select * from [jnt:role] where [j:permissionNames]='editModeActions'", queryLanguage: SQL2) {
            mutateProperty(name: "j:permissionNames") {
                removeValue(value: "editModeActions")
                addValue(value: "jContentActions")
            }
        }

        updateExternalPermissions3: mutateNodesByQuery(query: "select * from [jnt:externalPermissions] where [j:permissionNames]='editModeActions'", queryLanguage: SQL2) {
            mutateProperty(name: "j:permissionNames") {
                removeValue(value: "editModeActions")
                addValue(value: "jContentActions")
            }
        }

        updateRoles4: mutateNodesByQuery(query: "select * from [jnt:role] where [j:permissionNames]='editSelector' or [j:permissionNames]='categoriesSelector' or [j:permissionNames]='contentSelector' or [j:permissionNames]='createSelector' or [j:permissionNames]='filesAndImagesSelector' or [j:permissionNames]='latestSelector' or [j:permissionNames]='portletsSelector' or [j:permissionNames]='searchSelector' or [j:permissionNames]='sitemapSelector' or [j:permissionNames]='siteSettingsSelector'", queryLanguage: SQL2) {
            mutateProperty(name: "j:permissionNames") {
                removeValues(values: ["editSelector","categoriesSelector","contentSelector","createSelector","filesAndImagesSelector","latestSelector","portletsSelector","searchSelector","sitemapSelector","siteSettingsSelector"])
            }
        }

        updateRoles5: mutateNodesByQuery(query: "select * from [jnt:role] where localname()='reviewer'", queryLanguage: SQL2) {
            mutateProperty(name: "j:permissionNames") {
                addValue(value: "workflow-dashboard-access")
            }
        }
    }
}
