<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

    <!-- You can change here the cache implementation that Jahia will use, notably for it's HTML cache, internal
         caches. For DB caches, this is now managed by the Hibernate implementation, and is configured in the
         applicationcontext-hibernate.xml file.
    -->
    <bean id="ehCacheProvider" class="org.jahia.services.cache.ehcache.EhCacheProvider">
    	<property name="configurationResource">
			<bean class="org.jahia.settings.EhCacheConfigFactoryBean">
				<constructor-arg index="0" value="/ehcache-jahia.xml" />
				<constructor-arg index="1" value="${cluster.activated}" />
			</bean>
    	</property>
        <!-- This property allows to fix a limit for cache entries dependencies management,
if an entry have more than this value of dependencies then
when we flush this entry we will flush the whole cache-->
        <property name="groupsSizeLimit" value="100"/>
    </bean>
    <bean id="JahiaCacheService" class="org.jahia.services.cache.CacheFactory" parent="jahiaServiceTemplate" factory-method="getInstance" init-method="start">
		<property name="cacheProviders">
			<map>
				<entry key="DEFAULT_CACHE" value-ref="org.jahia.services.cache.CacheProvider" />
				<entry key="EH_CACHE" value-ref="ehCacheProvider" />
			</map>
		</property>
		<property name="cacheProviderForCache">
			<map>
				<entry key="SkeletonCache" value="EH_CACHE" />
				<entry key="ContainerHTMLCache" value="EH_CACHE" />
				<entry key="LockAlreadyAcquiredMap" value="EH_CACHE" />
				<entry key="LockPrerequisitesResultMap" value="EH_CACHE" />
				<entry key="WebdavCache" value="EH_CACHE" />
			</map>
		</property>
    </bean>

	<bean id="ResponseCacheControlFilter" class="org.jahia.bin.filters.ResponseCacheControlFilter">
		<!-- turns this filter on/off -->
		<property name="enabled" value="true"/>
		<!-- Expires should be the number of seconds from now when a given static resource should expire -->
		<property name="expires" value="2678400"/>
		<!--
			Never-Expires should be the number of seconds from now when a given static resource should expire.
            This option is used for resources that are never changed (e.g. GWT or those that contain a version number in the file name).
		-->
		<property name="neverExpires" value="31536000"/>
		<!--
            Regular expression pattern for resources, which should be cached by the browser by setting 'Expires'
            header to the configured value (see 'expires' property above).
		-->
		<property name="cachedResources" value=".*"/>
		<!--
            Regular expression pattern for resources, which should be cached forever (see 'neverExpires' property above).
            This condition takes precedence over the 'cachedResources' parameter.
		-->
		<property name="foreverCachedResources">
			<value>.*/gwt/.*\.cache\..*</value>
		</property>
		<!--
            Regular expression pattern of resources, for which no-cache headers will be set.
            This condition takes precedence over the 'foreverCachedResources' and 'cachedResources' properties.
		-->
		<property name="noCacheResources">
			<value>(.*/Jahia(/.*)?|.*/cms/.*|.*/files/.*|.*\.jsp(\?.*)?|.*/gwt/.*\.nocache\..*|.*/tools/.*)</value>
		</property>
	</bean>

	<bean id="ModuleCacheProvider" class="org.jahia.services.render.filter.cache.ModuleCacheProvider">
        <property name="cacheProvider" ref="ehCacheProvider"/>
        <!-- Time to wait before going to render generation if someone is already asking for the same key put 0 for waiting forever-->
        <property name="blockingTimeout" value="30000"/>
        <property name="keyGenerator">
        	<bean class="org.jahia.services.render.filter.cache.DefaultCacheKeyGenerator">
                <property name="groupManagerService" ref="JahiaGroupManagerService"/>
                <property name="cacheProvider" ref="ehCacheProvider"/>
                <property name="template" ref="jcrTemplate"/>
        	</bean>
        </property>
	</bean>

    <!--<bean id="cacheFilter" class="org.jahia.services.render.filter.cache.CacheFilter">
        <property name="priority" value="20" />
    	<property name="cacheProvider" ref="ModuleCacheProvider"/>
        <property name="conditions">
            <set>
                <bean class="org.jahia.services.render.filter.AbstractFilter$NotCondition">
                    <constructor-arg>
                        <bean class="org.jahia.services.render.filter.AbstractFilter$ModeCondition">
                            <constructor-arg value="edit"/>
                        </bean>
                    </constructor-arg>
                </bean>
            </set>
        </property>
    </bean>-->

    <bean id="moduleGeneratorQueue" class="org.jahia.services.render.filter.cache.ModuleGeneratorQueue">
        <property name="maxModulesToGenerateInParallel" value="50"/>
        <property name="moduleGenerationWaitTime" value="10000"/>
        <property name="minimumIntervalAfterLastAutoThreadDump" value="60000"/>
    </bean>

    <bean id="cacheFilter" class="org.jahia.services.render.filter.cache.AggregateCacheFilter">
        <property name="priority" value="16" />
    	<property name="cacheProvider" ref="ModuleCacheProvider"/>
    	<property name="skipOnTemplateTypes" value="json"/>
        <property name="skipOnConfiguration" value="include,wrapper,option"/>
        <property name="applyOnModes" value="live"/>
        <property name="generatorQueue" ref="moduleGeneratorQueue"/>
    </bean>
    <bean id="mainResourceCacheFilter" class="org.jahia.services.render.filter.cache.CacheFilter" parent="cacheFilter">
        <property name="applyOnMainResource" value="true"/>
    </bean>

    <bean id="nonMainResourceCacheFilter" class="org.jahia.services.render.filter.cache.CacheFilter" parent="cacheFilter">
        <property name="skipOnMainResource" value="true"/>
    </bean>

    <bean name="cacheMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="urlMap">
            <map>
                <entry key="/cache/**">
					<bean class="org.jahia.bin.CacheController">
						<property name="cacheService" ref="JahiaCacheService"/>
					</bean>
                </entry>
            </map>
        </property>
    </bean>

</beans>
